@page "/counter"

@inject Data.CounterSaver _counterSaver
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h1>Counter</h1>

<p>Current count: @_counterSaver.Counter</p>
<p>Time To calculate(ms): @timeToCalculateNextPrime</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<button class="btn btn-primary" @onclick="IncrementCountFaster">Click me faster</button>

<div>
    <label>Time to run Prime Counter</label>
    <input type="number" @bind="primesMilliseconds" />

    @if (higihestPrime != 0)
    {
        <p>Highest Prime: @higihestPrime</p>
    }

    <button class="btn btn-primary" @onclick="CalculatePrimes">Calculate Primes</button>
</div>

@code {

    private int primesMilliseconds = 1;

    private long higihestPrime = 0;

    private double timeToCalculateNextPrime = 0;

    private string hashValue = "";

    string IntCookieName = "CounterValue";
    string CounterHash = "CounterHash";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var hashCookieValue = await GetCookie(CounterHash);
            if (hashCookieValue != null)
            {
                hashValue = hashCookieValue.ToString();
            }
            else
            {
                hashValue = Services.PageHelpers.GetHashString(_counterSaver.Counter.ToString());
            }

            var value = await GetCookie(IntCookieName);
            if (value != null)
            {
                _counterSaver.Counter = Convert.ToInt64(value.ToString());
            }

            var checkHashValue = Services.PageHelpers.GetHashString(_counterSaver.Counter.ToString());

            if (_counterSaver.Counter != 0 && !String.IsNullOrEmpty(hashValue) && hashValue != checkHashValue)
            {
                _counterSaver.Counter = 0;
            }

            StateHasChanged();
        }
    }

    async Task<object> GetCookie(string cookieName)
    {
        var value = await localStorage.GetItemAsync<object>(cookieName);

        return value;
    }

    async Task SetCookie(string cookieName, object value)
    {
        await localStorage.SetItemAsync(cookieName, value);
    }

    private async void IncrementCount()
    {
        (_counterSaver.Counter, timeToCalculateNextPrime) = _counterSaver.Calculation(_counterSaver.Counter);
        await SetCookie(IntCookieName, _counterSaver.Counter);


        var currentCountHash = Services.PageHelpers.GetHashString(_counterSaver.Counter.ToString());
        await SetCookie(CounterHash, currentCountHash);
    }

    private async void IncrementCountFaster()
    {
        (_counterSaver.Counter, timeToCalculateNextPrime) = _counterSaver.CalculationFaster(_counterSaver.Counter);
        await SetCookie(IntCookieName, _counterSaver.Counter);


        var currentCountHash = Services.PageHelpers.GetHashString(_counterSaver.Counter.ToString());
        await SetCookie(CounterHash, currentCountHash);
    }

    private void CalculatePrimes()
    {
        higihestPrime = _counterSaver.CountPrimes(primesMilliseconds);
    }
}
